openapi: 3.0.1
info:
  version: '{{version}}'
  title: Link API
servers:
  - url: {{server-base-url}}
    description: This server
security:
  - oauth: []
tags:
  - name: API Root
    description: The root endpoint of the API
paths:
  /api:
    get:
      tags:
        - API Root
      summary: Gets version information about this installation of Link's API
      operationId: getVersionInfo
      responses:
        '200':
          description: successful response
          content:
            'application/json':
              schema:
                type: string
      security:
        - { }
  /api/$tenant-schema:
    get:
      tags:
        - API Root
      summary: Gets the JSON schema specification of the Tenant configuration
      operationId: getTenantJsonSchema
      responses:
        '200':
          description: successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ApiInfoModel'
      security:
        - { }
  /api/docs:
    get:
      tags:
        - API Root
      summary: The swagger spec document for this Link's API
      operationId: getDocs
      responses:
        '200':
          description: successful response
          content:
            text/yaml:
              schema:
                type: string
      security:
        - {}
  /api/tenant:
    get:
      tags:
        - Tenants
      summary: Search all tenants
      operationId: searchTenants
      responses:
        '200':
          description: successful response
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantItem'
    post:
      tags:
        - Tenants
      summary: Create a new tenant. If id is specified, will make sure that the tenant does not arleady exist and then create the tenant with the specified id
      operationId: createTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
          'application/x-yaml':
            schema:
              $ref: '#/components/schemas/Tenant'
      responses:
        '200':
          description: successful response
  /api/tenant/{id}:
    get:
      tags:
        - Tenants
      summary: Get a single tenant
      operationId: getTenant
      parameters:
        - name: id
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Tenant'
    put:
      tags:
        - Tenants
      summary: Updates an existing tenant
      operationId: updateTenant
      parameters:
        - name: id
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
          'application/x-yaml':
            schema:
              $ref: '#/components/schemas/Tenant'
      responses:
        '200':
          description: successful response
    delete:
      tags:
        - Tenants
      summary: Delete a tenant
      operationId: deleteTenant
      parameters:
        - name: id
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successful response with no content returned
  /api/{tenantId}/poi:
    get:
      tags:
        - Patient Identification
      summary: Search patient lists
      operationId: searchPatientLists
      parameters:
        - name: tenantId
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful response
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PatientList'
  /api/{tenantId}/poi/{id}:
    get:
      tags:
        - Patient Identification
      summary: Get one patient list
      operationId: getPatientList
      parameters:
        - name: tenantId
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The id of the patient list to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PatientList'
  /api/{tenantId}/poi/fhir/List:
    post:
      tags:
        - Patient Identification
      summary: Submit a FHIR List of patients to be included in report generation
      description: Measure and reporting period are derived from extensions in the List
      operationId: saveFhirList
      parameters:
        - name: tenantId
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/xml:
            schema:
              type: string
      responses:
        '200':
          description: successful response
  /api/{tenantId}/poi/$query-list:
    get:
      tags:
        - Patient Identification
      summary: Query the EHR's FHIR API for a real-time patient list and persist the patient identifiers
      operationId: queryPatientList
      parameters:
        - name: tenantId
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful response
  /api/{tenantId}/report/{reportId}/$send:
    post:
      tags:
        - Reports
      summary: Send/submit the specified report to the consumer/recipient
      operationId: send
      parameters:
        - name: tenantId
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
        - name: reportId
          in: path
          description: The logical id of the report to submit
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful response
  /api/{tenantId}/report/$generate:
    post:
      tags:
        - Reports
      summary: Generate a report for given criteria
      description: Generates a report based on the specified measure and reporting period criteria. Report generation can take time to respond, as it involves querying the configured EHR for data related to the patients identified for the criteria.
      operationId: generateReport_1
      parameters:
        - name: tenantId
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateRequest'
      responses:
        '200':
          description: successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Report'
  /api/{tenantId}/report/$generateMultiMeasure:
    post:
      tags:
        - Reports
      summary: Generate a report for given criteria
      description: Generates a report based on the specified measure and reporting period criteria. Report generation can take time to respond, as it involves querying the configured EHR for data related to the patients identified for the criteria.
      operationId: generateReport_2
      parameters:
        - name: tenantId
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
        - name: multiMeasureBundleId
          in: query
          description: The id of the multi measure package/bundle
          required: true
          schema:
            type: string
        - name: periodStart
          in: query
          description: The start date of the reporting period, formatted as a FHIR datetime
          required: true
          schema:
            type: string
        - name: periodEnd
          in: query
          description: The end date of the reporting period, formatted as a FHIR datetime
          required: true
          schema:
            type: string
        - name: regenerate
          in: query
          description: Whether to regenerate the report if a report with the same criteria already exists
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Report'
  /api/{tenantId}/report/{reportId}/aggregate:
    get:
      tags:
        - Reports
      summary: Get the aggregate measure report(s) generated the specified report id
      operationId: getReportAggregates
      parameters:
        - name: tenantId
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
        - name: reportId
          in: path
          description: The id of the report
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of FHIR MeasureReports
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FHIR.MeasureReport'
  /api/{tenantId}/report/{reportId}/patientList:
    get:
      tags:
        - Reports
      summary: Get the patient list(s) used to generate the specified report id
      operationId: getReportPatientLists
      parameters:
        - name: tenantId
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
        - name: reportId
          in: path
          description: The id of the report
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful response
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PatientList'
  /api/{tenantId}/report/{reportId}/individual/{patientMeasureReportId}:
    get:
      tags:
        - Reports
      summary: Get an individual's patient measure report generated for the specified report id
      operationId: getPatientMeasureReport
      parameters:
        - name: tenantId
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
        - name: reportId
          in: path
          description: The id of the report
          required: true
          schema:
            type: string
        - name: patientMeasureReportId
          in: path
          description: The id of the patient measure report
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A individual's FHIR MeasureReport
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/FHIR.MeasureReport'
  /api/measureDef:
    get:
      tags:
        - Measure Definitions
      summary: Search measure definitions loaded in Link
      operationId: searchMeasureDefinitions
      responses:
        '200':
          description: successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/MeasureDefinition'
    put:
      tags:
        - Measure Definitions
      summary: Loads the measure bundle from the request into Link. Either the request body must have a FHIR Bundle, or the url parameter must be specified.
      operationId: createOrUpdateMeasureDef
      parameters:
        - name: url
          in: query
          description: A url reference to the measure definition bundle that should be loaded
          required: false
          schema:
            type: string
      requestBody:
        required: false
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/FHIR.Bundle'
      responses:
        '200':
          description: successful response
  /api/measureDef/{measureId}:
    delete:
      tags:
        - Measure Definitions
      summary: Loads the measure bundle from the request into Link. Either the request body must have a FHIR Bundle, or the url parameter must be specified.
      operationId: deleteMeasureDef
      parameters:
        - name: measureId
          in: path
          description: The measureId of the measure definition to be deleted
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successful response with no content returned
  /api/measurePackage:
    get:
      tags:
        - Measure Packages
      summary: Search measure packages
      operationId: searchMeasurePackages
      responses:
        '200':
          description: successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/MeasurePackage'
    put:
      tags:
        - Measure Packages
      summary: Saves a measure package
      operationId: createOrUpdateMeasurePackage
      requestBody:
        required: false
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/MeasurePackage'
      responses:
        '200':
          description: successful response
  /api/measurePackage/{id}:
    delete:
      tags:
        - Measure Packages
      summary: Deletes a measure package
      operationId: deleteMeasurePackage
      parameters:
        - name: id
          in: path
          description: The id of the measure package to be deleted
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successful response with no content returned
  /api/{tenantId}/conceptMap:
    put:
      tags:
        - Concept Maps
      summary: Creates or updates a concept map
      operationId: createOrUpdateConceptMap
      parameters:
        - name: tenantId
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ConceptMap'
      responses:
        '200':
          description: successful response
    get:
      tags:
        - Concept Maps
      summary: Searches concept maps for the specified tenant
      operationId: searchConceptMap
      parameters:
        - name: tenantId
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful response
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConceptMapItem'
  /api/{tenantId}/conceptMap/{id}:
    get:
      tags:
        - Concept Maps
      summary: Retrievse a specific concept map from the tenant
      operationId: getConceptMap
      parameters:
        - name: tenantId
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The id of the concept map to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ConceptMap'
  /api/{tenantId}/data/$expunge:
    delete:
      tags:
        - Data
      summary: Expunges/deletes any data that has passed the tenant's configured retention
      operationId: expungeData
      parameters:
        - name: tenantId
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful response
  /api/{tenantId}/data/$test-fhir:
    get:
      tags:
        - Data
      summary: Tests the connectivity to the tenant's configured fhir server
      operationId: test
      parameters:
        - name: tenantId
          in: path
          description: The id of the tenant
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TestResponse'

components:
  schemas:
    ApiInfoModel:
      type: object
      properties:
        build:
          type: string
        version:
          type: string
    PatientId:
      type: object
      properties:
        reference:
          type: string
        identifier:
          type: string
    PatientList:
      type: object
      properties:
        id:
          type: string
        periodStart:
          type: string
        periodEnd:
          type: string
        measureId:
          type: string
        lastUpdated:
          type: string
        patients:
          type: array
          items:
            $ref: '#/components/schemas/PatientId'
    GenerateRequest:
      type: object
      properties:
        regenerate:
          type: boolean
        bundleIds:
          type: array
          items:
            type: string
        periodStart:
          type: string
        periodEnd:
          type: string
    Report:
      type: object
      properties:
        id:
          type: string
        measureId:
          type: array
          items:
            type: string
        periodStart:
          type: string
        periodEnd:
          type: string
        status:
          type: string
          enum:
            - Draft
            - Submitted
        submittedTime:
          type: string
        generatedTime:
          type: string
        version:
          type: string
        patientLists:
          type: array
          items:
            type: string
        aggregates:
          type: array
          items:
            type: string
    MeasureDefinition:
      type: object
      properties:
        id:
          type: string
        measureId:
          type: string
        bundle:
          $ref: '#/components/schemas/FHIR.Bundle'
        lastUpdated:
          type: string
    MeasurePackage:
      type: object
      properties:
        id:
          type: string
        measureIds:
          type: array
          items:
            type: string
    ConceptMap:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        contexts:
          type: array
          items:
            type: string
        conceptMap:
          $ref: '#/components/schemas/FHIR.ConceptMap'
    ConceptMapItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        contexts:
          type: array
          items:
            type: string
    TestResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
    TenantItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
    Tenant:
      type: object
      properties:
        id:
          type: string
          description: 'A unique ID of the tenant. Cannot contain special characters other than dashes and underscores.'
        name:
          type: string
          description: 'The name of the tenant, such as the facility''s name.'
        cdcOrgId:
          type: string
          description: 'Organization ID for the tenant according to CDC. Used by the Measure Reporting Plan functionality, and when bundling to submit to NHSN; an Organization resource is created uses this as an identifier of the facility.'
        description:
          type: string
          description: 'A description of the tenant that is more meaningful/useful than the id.'
        database:
          type: string
          description: 'The name of the database to use for the tenant''s PHI/PII data. The same connection string for the database server is used for each tenant, but a different database on the server is used for each tenant.'
        bundling:
          allOf:
            - $ref: '#/components/schemas/Bundling'
            - description: 'Configuration properties for how to bundle the final submission, including contact information that is used when creating an Organization resource that represents the sending facility (the tenant).'
        scheduling:
          allOf:
            - $ref: '#/components/schemas/Schedule'
            - description: Schedule configuration for the tenant that can be used to automatically begin processes such as querying for patient lists, data retention, and automatic generation and submission of reports.
        events:
          allOf:
            - $ref: '#/components/schemas/Events'
            - description: 'Custom classes/functionality that can be turned on at various points during the report generation pipeline.'
        queryList:
          allOf:
            - $ref: '#/components/schemas/QueryList'
            - description: 'Configuration that should be used for /api/{tenantId}/poi/$query-list to query the EHR''s FHIR List for patients of interest'
        fhirQuery:
          allOf:
            - $ref: '#/components/schemas/FhirQuery'
            - description: 'Configuration to use when querying patients of interest for their clinical data, such as Encounter, Condition, etc. Includes authentication strategy that is needed to successfully query the EHR''s FHIR API.'
        reportingPlan:
          allOf:
            - $ref: '#/components/schemas/ReportingPlan'
            - description: 'Configuration for how to query the MRP (reporting plan) interface at CDC/NHSN to determine if a facility/tenant is signed up to report during the calculated reporting period.'
        retentionPeriod:
          type: string
          description: ISO 8601 formatted duration in which to keep data for each tenant.
          default: 'P3M'
    Bundling:
      type: object
      properties:
        bundleType:
          type: string
          enum:
            - COLLECTION
            - BATCH
          default: COLLECTION
          description: 'The type of submission bundle to create.'
        includesCensuses:
          type: boolean
          default: true
          description: 'Whether to include censuses in the submission bundle.'
        mergeCensuses:
          type: boolean
          default: true
          description: 'Whether to merge multiple censuses into a single list.'
        includeIndividualMeasureReports:
          type: boolean
          default: true
          description: 'Whether to include individual measure reports in the submission bundle.'
        promoteLineLevelResources:
          type: boolean
          default: false
          description: 'Whether to move contained line-level resources to the top level of the submission bundle.'
        npi:
          type: string
          description: 'The National Provider Identifier (NPI) of the organization/facility the system is bundling/submitting for, to be used in the submission Bundle''s Organization.identifier field'
        name:
          type: string
          description: 'The name of the organization/facility the system is bundling/submitting for, to be used in the submission Bundle''s Organization.name field'
        phone:
          type: string
          description: 'The phone of the organization/facility the system is bundling/submitting for, to be used in the submission Bundle''s Organization.name field'
        email:
          type: string
          description: 'The email of the organization/facility the system is bundling/submitting for, to be used in the submission Bundle''s Organization.name field'
        address:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: 'The address of the organization/facility the system is bundling/submitting for, to be used in the submission Bundle''s Organization.name field'
    Address:
      type: object
      properties:
        addressLine:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
    Schedule:
      type: object
      description: |
        See <a href="https://productresources.collibra.com/docs/collibra/latest/Content/Cron/co_spring-cron.htm" target="_new">Spring Cron syntax</a> for more info.<br/>
        See <a href="https://crontab.guru/" target="_new">Crontab.guru</a> for more info (note: seconds aren't accounted for in this tool).
      properties:
        queryPatientListCron:
          type: string
          description: 'The CRON-formatted schedule to use querying patient list information from the EHR.<br/>The equivalent of manually calling /api/{tenantId}/poi/$query-list'
        dataRetentionCheckCron:
          type: string
          description: 'The CRON-formatted schedule to use for data retention checks (removing data that is outside the tenant''s configured retention period).'
        generateAndSubmitReports:
          type: array
          items:
            $ref: '#/components/schemas/GenerateReport'
          description: 'Configuration for when to automatically generate and submit reports.'
    GenerateReport:
      type: object
      properties:
        cron:
          type: string
          description: 'The CRON-formatted schedule to use for this report''s generation and submission'
        measureIds:
          type: array
          items:
            type: string
          description: 'The IDs of the measures to generate the report for'
        reportingPeriodMethod:
          type: string
          enum:
            - LastMonth
            - CurrentMonth
            - LastWeek
            - CurrentWeek
          description: 'The method that should be used to calculate the reporting period for the report.'
        regenerateIfExists:
          type: boolean
          default: false
          description: 'If a report already exists for the calculated reporting period and measures, indicates whether or not the report generation process should continue and overwrite the already existing report.'
    Events:
      type: object
      properties:
        BeforeMeasureResolution:
          type: array
          items:
            type: string
        AfterMeasureResolution:
          type: array
          items:
            type: string
        OnRegeneration:
          type: array
          items:
            type: string
        BeforePatientOfInterestLookup:
          type: array
          items:
            type: string
        AfterPatientOfInterestLookup:
          type: array
          items:
            type: string
        BeforePatientDataQuery:
          type: array
          items:
            type: string
        AfterPatientResourceQuery:
          type: array
          items:
            type: string
        AfterPatientDataQuery:
          type: array
          items:
            type: string
        BeforePatientDataStore:
          type: array
          items:
            type: string
        AfterPatientDataStore:
          type: array
          items:
            type: string
        BeforeMeasureEval:
          type: array
          items:
            type: string
        AfterMeasureEval:
          type: array
          items:
            type: string
        BeforeReportStore:
          type: array
          items:
            type: string
        AfterReportStore:
          type: array
          items:
            type: string
        BeforeBundling:
          type: array
          items:
            type: string
        AfterBundling:
          type: array
          items:
            type: string
    QueryList:
      type: object
      properties:
        fhirServerBase:
          type: string
        lists:
          type: array
          items:
            $ref: '#/components/schemas/EhrPatientList'
    EhrPatientList:
      type: object
      properties:
        listId:
          type: string
        measureId:
          type: array
          items:
            type: string
    FhirQuery:
      type: object
      properties:
        fhirServerBase:
          type: string
        authClass:
          type: string
          description: 'The class that should be used (if any) to authenticate queries to the EHR''s FHIR server.'
          enum:
            - com.lantanagroup.link.query.auth.BasicAuth
            - com.lantanagroup.link.query.auth.BasicAuthAndApiKeyHeader
            - com.lantanagroup.link.query.auth.AzureAuth
            - com.lantanagroup.link.query.auth.CernerAuth
            - com.lantanagroup.link.query.auth.EpicAuth
            - com.lantanagroup.link.query.auth.TokenAuth
        parallelPatients:
          type: number
          description: 'The number of patients to query for in parallel using separate threads. Should not be greater than the number of cores available to the installation.'
        encounterBased:
          type: boolean
          default: true
          description: 'Whether to exit immediately from the query phase if no encounters are found'
        basicAuth:
          allOf:
            - $ref: '#/components/schemas/BasicAuth'
            - description: 'Configuration used by BasicAuth implementation'
        basicAuthAndApiKey:
          allOf:
            - $ref: '#/components/schemas/BasicAuthAndApiKey'
            - description: 'Configuration used by basicAuthAndApiKeyHeader implementation'
        tokenAuth:
          allOf:
            - $ref: '#/components/schemas/TokenAuth'
            - description: 'Configuration used by TokenAuth implementation'
        azureAuth:
          allOf:
            - $ref: '#/components/schemas/AzureAuth'
            - description: 'Configuration used by AzureAuth implementation'
        cernerAuth:
          allOf:
            - $ref: '#/components/schemas/CernerAuth'
            - description: 'Configuration used by CernerAuth implementation'
        epicAuth:
          allOf:
            - $ref: '#/components/schemas/EpicAuth'
            - description: 'Configuration used by EpicAuth implementation'
        queryPlans:
          type: object
          properties:
            measureId:
              $ref: '#/components/schemas/QueryPlan'
    BasicAuth:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    BasicAuthAndApiKey:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        apiKey:
          type: string
    AzureAuth:
      type: object
      properties:
        tokenUrl:
          type: string
        clientId:
          type: string
        secret:
          type: string
        resource:
          type: string
    TokenAuth:
      type: object
      properties:
        token:
          type: string
    CernerAuth:
      type: object
      properties:
        tokenUrl:
          type: string
        clientId:
          type: string
        secret:
          type: string
        scopes:
          type: string
    EpicAuth:
      type: object
      properties:
        key:
          type: string
          description: The key that should be used to sign the JWT generated by Link to send in the Authorization header to the tokenUrl
        tokenUrl:
          type: string
        clientId:
          type: string
        audience:
          type: string
    ReportingPlan:
      type: object
      required:
        - url
        - nhsnOrgId
        - planNames
      properties:
        enabled:
          type: boolean
          default: false
        url:
          type: string
        nhsnOrgId:
          type: string
        planNames:
          type: object
          required:
            - measureId
          properties:
            measureId:
              type: string
              description: Key is the  measure id registered in Link, value is the NHSN plan ID
              example: nhsnPlanId
    QueryPlan:
      type: object
      properties:
        lookback:
          type: string
        initial:
          type: array
          items:
            $ref: '#/components/schemas/TypedQueryPlan'
        supplemental:
          type: array
          items:
            $ref: '#/components/schemas/TypedQueryPlan'
    TypedQueryPlan:
      type: object
      properties:
        resourceType:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterConfig'
        references:
          $ref: '#/components/schemas/ReferencesConfig'
        earlyExit:
          type: boolean
    ReferencesConfig:
      type: object
      properties:
        operationType:
          type: string
          enum:
            - READ
            - SEARCH
        paged:
          type: number
    ParameterConfig:
      type: object
      properties:
        name:
          type: string
        literal:
          type: string
        variable:
          type: string
        format:
          type: string
        ids:
          type: string
        paged:
          type: number
    FHIR.ConceptMap:
      type: object
    FHIR.MeasureReport:
      type: object
    FHIR.Bundle:
      type: object